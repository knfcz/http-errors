{"mappings":";;;;;;;;;;;AEOA,MAAM,+BAAS,SAA2B,KAAK;IAK3C,YAAY,QAAE,IAAI,CAAA,gBAAE,YAAY,CAAA,cAAE,UAAU,CAAA,WAAE,OAAO,CAAA,EAAc,CAAE;QACjE,KAAK,CAAC,YAAY,CAAC,CAAC;QAEpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;KAChC;CACJ;IAED,wCAAyB,GAAV,+BAAS;;ADrBxB;AAEA,MAAM,0CAAoB,SAA2B,CAAA,GAAA,wCAAS,CAAA;IAC1D,YAAY,OAAU,CAAE;QACpB,KAAK,CAAC;YACF,IAAI,EAAE,iBAAiB;YACvB,UAAU,EAAE,GAAG;qBACf,OAAO;SACV,CAAC,CAAC;KACN;CACJ;IAED,wCAAoC,GAArB,0CAAoB;;ADZnC;AGAA;AAEA,MAAM,uCAAiB,SAA2B,CAAA,GAAA,wCAAS,CAAA;IACvD,YAAY,OAAU,CAAE;QACpB,KAAK,CAAC;YACF,IAAI,EAAE,cAAc;YACpB,UAAU,EAAE,GAAG;qBACf,OAAO;SACV,CAAC,CAAC;KACN;CACJ;IAED,wCAAiC,GAAlB,uCAAiB;;;;ACZhC;AAEA,MAAM,4CAAsB,SAA2B,CAAA,GAAA,wCAAS,CAAA;IAC5D,YAAY,OAAU,CAAE;QACpB,KAAK,CAAC;YACF,IAAI,EAAE,mBAAmB;YACzB,UAAU,EAAE,GAAG;qBACf,OAAO;SACV,CAAC,CAAC;KACN;CACJ;IAED,wCAAsC,GAAvB,4CAAsB;;;ACZrC;AAEA,MAAM,0CAAoB,SAA2B,CAAA,GAAA,wCAAS,CAAA;IAC1D,YAAY,OAAU,CAAE;QACpB,KAAK,CAAC;YACF,IAAI,EAAE,iBAAiB;YACvB,UAAU,EAAE,GAAG;qBACf,OAAO;SACV,CAAC,CAAC;KACN;CACJ;IAED,wCAAoC,GAArB,0CAAoB;;;ACZnC;AAEA,MAAM,2CAAqB,SAA2B,CAAA,GAAA,wCAAS,CAAA;IAC3D,YAAY,OAAU,CAAE;QACpB,KAAK,CAAC;YACF,IAAI,EAAE,kBAAkB;YACxB,UAAU,EAAE,GAAG;qBACf,OAAO;SACV,CAAC,CAAC;KACN;CACJ;IAED,wCAAqC,GAAtB,2CAAqB;;;ACZpC;AAWA,MAAM,uCAAiB,GACnB,CAAC,OAAgB,GACjB,CAAC,KAAY,EAAE,GAAW,EAAE,GAAoB,EAAE,IAAc,GAAK;QACjE,IAAI,SAAS,GAAG,aAAa,AAAC;QAC9B,IAAI,UAAU,GAAG,GAAG,AAAC;QACrB,IAAI,OAAO,GAAG,EAAE,AAAC;QAEjB,IAAI,OAAO,CAAC,QAAQ,EAChB,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;QAGzC,IAAI,KAAK,YAAY,CAAA,GAAA,wCAAS,CAAA,EAAE;YAC5B,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YAC9B,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC;YACvB,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;SAC3B;QAED,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;uBACxB,SAAS;qBACT,OAAO;SACV,CAAC,CAAC;KACN,AAAC;IAEN,wCAAiC,GAAlB,uCAAiB;","sources":["src/index.ts","src/AccessForbiddenError.ts","src/HTTPError.ts","src/ExpiredTokenError.ts","src/InvalidParametersError.ts","src/MissingResourceError.ts","src/ResourceConflictError.ts","src/withErrorHandling.ts"],"sourcesContent":["export { default as AccessForbiddenError } from './AccessForbiddenError';\nexport { default as ExpiredTokenError } from './ExpiredTokenError';\nexport { default as HTTPError } from './HTTPError';\nexport { default as InvalidParametersError } from './InvalidParametersError';\nexport { default as MissingResourceError } from './MissingResourceError';\nexport { default as ResourceConflictError } from './ResourceConflictError';\nexport { default as withErrorHandling } from './withErrorHandling';\n","import HTTPError from './HTTPError';\n\nclass AccessForbiddenError<P extends object> extends HTTPError<P> {\n    constructor(payload: P) {\n        super({\n            code: 'accessForbidden',\n            httpStatus: 403,\n            payload,\n        });\n    }\n}\n\nexport default AccessForbiddenError;\n","interface options<P extends object> {\n    httpStatus: number;\n    code: string;\n    errorMessage?: string;\n    payload: P;\n}\n\nclass HTTPError<P extends object> extends Error {\n    public httpStatus: number;\n    public code: string;\n    public payload: P;\n\n    constructor({ code, errorMessage, httpStatus, payload }: options<P>) {\n        super(errorMessage);\n\n        this.code = code;\n        this.httpStatus = httpStatus;\n        this.payload = payload || {};\n    }\n}\n\nexport default HTTPError;\n","import HTTPError from './HTTPError';\n\nclass ExpiredTokenError<P extends object> extends HTTPError<P> {\n    constructor(payload: P) {\n        super({\n            code: 'expiredToken',\n            httpStatus: 403,\n            payload,\n        });\n    }\n}\n\nexport default ExpiredTokenError;\n","import HTTPError from './HTTPError';\n\nclass InvalidParametersError<P extends object> extends HTTPError<P> {\n    constructor(payload: P) {\n        super({\n            code: 'invalidParameters',\n            httpStatus: 400,\n            payload,\n        });\n    }\n}\n\nexport default InvalidParametersError;\n","import HTTPError from './HTTPError';\n\nclass MissingResourceError<P extends object> extends HTTPError<P> {\n    constructor(payload: P) {\n        super({\n            code: 'missingResource',\n            httpStatus: 404,\n            payload,\n        });\n    }\n}\n\nexport default MissingResourceError;\n","import HTTPError from './HTTPError';\n\nclass ResourceConflictError<P extends object> extends HTTPError<P> {\n    constructor(payload: P) {\n        super({\n            code: 'resourceConflict',\n            httpStatus: 409,\n            payload,\n        });\n    }\n}\n\nexport default ResourceConflictError;\n","import HTTPError from './HTTPError';\n\ntype ExpressResponse = {\n    status: (code: number) => ExpressResponse;\n    json: (payload: object) => void;\n};\n\ntype options = {\n    logError: boolean;\n};\n\nconst withErrorHandling =\n    (options: options) =>\n    (error: Error, req: object, res: ExpressResponse, next: Function) => {\n        let errorCode = 'serverError';\n        let httpStatus = 500;\n        let payload = {};\n\n        if (options.logError) {\n            console.log('Caught error: ', error);\n        }\n\n        if (error instanceof HTTPError) {\n            httpStatus = error.httpStatus;\n            errorCode = error.code;\n            payload = error.payload;\n        }\n\n        res.status(httpStatus).json({\n            errorCode,\n            payload,\n        });\n    };\n\nexport default withErrorHandling;\n"],"names":[],"version":3,"file":"index.js.map"}